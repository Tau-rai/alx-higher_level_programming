# These are the test cases for the integer_validator function
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("width", -1)
Traceback (most recent call last):
...
ValueError: width must be greater than 0
>>> bg.integer_validator("my_int", -12)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0
>>> bg.integer_validator("my_int", 'h')
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", [3])
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator(5, 6)
>>> bg.integer_validator("my_int", 999999999999999999999999999999999999999)
>>> bg.integer_validator("my_int", 5.5)
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", 1e10)
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", {'key': 'value'})
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", range(100))
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0
>>> bg.integer_validator("my_int", False)
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("my_int", -999999999999999999999999999999)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0