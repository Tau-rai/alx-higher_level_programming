# Test cases for the matrix multiplication function

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]
>>> matrix_mul([[1.5, 2.5], [3.5, 4.5]], [[5.5, 6.5], [7.5, 8.5]])
[[27.0, 31.0], [53.0, 61.0]]
>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
[[58, 64], [139, 154]]
>>> matrix_mul([[1, 2]], [[3], [4]])
[[11]]
>>> matrix_mul([[1, 2]], [[3, 4]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied
>>> matrix_mul("not a list", [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list
>>> matrix_mul([[1, 2]], "not a list")
Traceback (most recent call last):
...
TypeError: m_b must be a list
>>> matrix_mul([1, 2], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists
>>> matrix_mul([[1, 2]], [3, 4])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists
>>> matrix_mul([], [[3, 4]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty
>>> matrix_mul([[1, 2]], [])
Traceback (most recent call last):
...
ValueError: m_b can't be empty
>>> matrix_mul([[1, "not a number"]], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats
>>> matrix_mul([[1, 2]], [[3, "not a number"]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats
>>> matrix_mul([[1, 2], [3]], [[4, 5]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size
>>> matrix_mul([[1, 2]], [[3], [4, 5]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

